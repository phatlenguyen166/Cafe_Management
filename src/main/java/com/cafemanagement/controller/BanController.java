package com.cafemanagement.controller;

import com.cafemanagement.dto.request.ChiTietDatBanRequest;
import com.cafemanagement.dto.response.LoginResponse;
import com.cafemanagement.model.Ban;
import org.springframework.ui.Model;
import com.cafemanagement.service.BanService;
import com.cafemanagement.service.ChiTietDatBanService;

import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Controller
@RequiredArgsConstructor
public class BanController extends BaseController {

    private final BanService banService;
    private final ChiTietDatBanService chiTietDatBanService;

    @GetMapping("/sales")
    public String sales(Model model, HttpSession session) {
        if (!isAuthenticated(session)) {
            return "redirect:/";
        }

        // L·∫•y danh s√°ch b√†n t·ª´ database
        List<Ban> listBan = banService.getAllBans();
        System.out.println("Danh s√°ch b√†n: " + listBan);
        model.addAttribute("listBan", listBan);
        model.addAttribute("activeTab", "sales");
        model.addAttribute("username", session.getAttribute("username"));

        // T√≠nh to√°n th·ªëng k√™ ƒë·ªông t·ª´ d·ªØ li·ªáu b√†n
        long banRanh = listBan.stream()
                .filter(ban -> "R·∫£nh".equals(ban.getTinhTrang().trim()))
                .count();

        long banDangSuDung = listBan.stream()
                .filter(ban -> "ƒêang s·ª≠ d·ª•ng".equals(ban.getTinhTrang().trim()))
                .count();

        long banDaDat = listBan.stream()
                .filter(ban -> "ƒê√£ ƒë·∫∑t".equals(ban.getTinhTrang().trim()))
                .count();

        // Th√™m th·ªëng k√™ b√†n
        model.addAttribute("banRanh", banRanh);
        model.addAttribute("banDangSuDung", banDangSuDung);
        model.addAttribute("banDaDat", banDaDat);
        model.addAttribute("tongBan", listBan.size());

        // Th√™m d·ªØ li·ªáu b√°n h√†ng
        model.addAttribute("todaySales", 2500000);
        model.addAttribute("todayOrders", 25);
        model.addAttribute("avgOrderValue", 100000);

        return "home";
    }

    @PostMapping("/dat-ban")
    public String datBan(@ModelAttribute ChiTietDatBanRequest request,
            Model model, HttpSession session) {
        if (!isAuthenticated(session)) {
            return "redirect:/";
        }

        try {
            // L·∫•y th√¥ng tin nh√¢n vi√™n t·ª´ session
            LoginResponse userInfo = (LoginResponse) session.getAttribute("userInfo");
            if (userInfo != null) {
                request.setMaNhanVien(userInfo.getMaNhanVien());
            }

            // T·∫°o chi ti·∫øt ƒë·∫∑t b√†n
            chiTietDatBanService.createChiTietDatBan(request);

            return "redirect:/sales?success=dat-ban";

        } catch (Exception e) {
            model.addAttribute("error", e.getMessage());
            return "redirect:/sales?error=" + e.getMessage();
        }
    }

    @PostMapping("/huy-dat-ban/{maBan}")
    public String huyDatBan(@PathVariable Integer maBan, Model model, HttpSession session) {
        if (!isAuthenticated(session)) {
            return "redirect:/";
        }

        try {
            chiTietDatBanService.cancelDatBan(maBan);
            return "redirect:/sales?success=huy-dat-ban";

        } catch (Exception e) {
            return "redirect:/sales?error=" + e.getMessage();
        }
    }

    @PostMapping("/chuyen-ban")
    public String chuyenBan(@RequestParam Integer maBanCu,
            @RequestParam Integer maBanMoi,
            @RequestParam(required = false) String note,
            HttpSession session) {
        if (!isAuthenticated(session)) {
            return "redirect:/";
        }

        try {
            // Validation
            if (maBanCu == null || maBanMoi == null) {
                throw new RuntimeException("Thi·∫øu th√¥ng tin b√†n!");
            }

            if (maBanCu.equals(maBanMoi)) {
                throw new RuntimeException("Kh√¥ng th·ªÉ chuy·ªÉn b√†n c√πng m·ªôt b√†n!");
            }

            // Log th√¥ng tin chuy·ªÉn b√†n
            System.out.println("üîÑ Chuy·ªÉn b√†n t·ª´ ID: " + maBanCu + " sang ID: " + maBanMoi);
            if (note != null && !note.trim().isEmpty()) {
                System.out.println("üìù Ghi ch√∫: " + note);
            }

            // Th·ª±c hi·ªán chuy·ªÉn b√†n
            banService.chuyenBan(maBanCu, maBanMoi);

            System.out.println("‚úÖ Chuy·ªÉn b√†n th√†nh c√¥ng!");
            return "redirect:/sales?success=chuyen-ban";

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói chuy·ªÉn b√†n: " + e.getMessage());
            e.printStackTrace();
            return "redirect:/sales?error=" + e.getMessage();
        }
    }
}